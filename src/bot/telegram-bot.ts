import TelegramBot from 'node-telegram-bot-api';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
interface User {
  id: number;
  username?: string;
  firstName: string;
  lastName?: string;
  categories: string[];
  notifications: boolean;
  lastActive: Date;
}

interface NewsItem {
  id: string;
  title: string;
  description: string;
  category: string;
  url?: string;
  publishedAt: Date;
  emoji: string;
}

class NewsBot {
  private bot: TelegramBot;
  private users: Map<number, User> = new Map();
  private newsCategories = [
    { id: 'tech', name: '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', emoji: 'üíª' },
    { id: 'business', name: '–ë–∏–∑–Ω–µ—Å', emoji: 'üíº' },
    { id: 'space', name: '–ö–æ—Å–º–æ—Å', emoji: 'üöÄ' },
    { id: 'sport', name: '–°–ø–æ—Ä—Ç', emoji: '‚öΩ' },
    { id: 'science', name: '–ù–∞—É–∫–∞', emoji: 'üî¨' },
    { id: 'entertainment', name: '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', emoji: 'üé¨' }
  ];

  private sampleNews: NewsItem[] = [
    {
      id: '1',
      title: '–ü—Ä–æ—Ä—ã–≤ –≤ –æ–±–ª–∞—Å—Ç–∏ –∫–≤–∞–Ω—Ç–æ–≤—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π',
      description: '–£—á–µ–Ω—ã–µ —Å–æ–∑–¥–∞–ª–∏ –Ω–æ–≤—ã–π –∫–≤–∞–Ω—Ç–æ–≤—ã–π –∫–æ–º–ø—å—é—Ç–µ—Ä —Å —Ä–µ–∫–æ—Ä–¥–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫—É–±–∏—Ç–æ–≤',
      category: 'tech',
      publishedAt: new Date(),
      emoji: 'üî¨'
    },
    {
      id: '2',
      title: 'SpaceX –∑–∞–ø—É—Å—Ç–∏–ª–∞ –Ω–æ–≤—É—é –º–∏—Å—Å–∏—é –Ω–∞ –ú–∞—Ä—Å',
      description: '–£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—É—Å–∫ —Ä–∞–∫–µ—Ç—ã Falcon Heavy —Å –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –∞–ø–ø–∞—Ä–∞—Ç–æ–º',
      category: 'space',
      publishedAt: new Date(),
      emoji: 'üöÄ'
    },
    {
      id: '3',
      title: '–ù–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥ –Ω–∞ –±–∏—Ä–∂–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π',
      description: '–ê–∫—Ü–∏–∏ IT-–∫–æ–º–ø–∞–Ω–∏–π –ø–æ–∫–∞–∑–∞–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ª–µ—Ç',
      category: 'business',
      publishedAt: new Date(),
      emoji: 'üìà'
    }
  ];

  constructor(token: string) {
    this.bot = new TelegramBot(token, { polling: true });
    this.setupCommands();
    this.setupCallbacks();
  }

  private setupCommands() {
    // –ö–æ–º–∞–Ω–¥–∞ /start
    this.bot.onText(/\/start/, (msg) => {
      const chatId = msg.chat.id;
      const user: User = {
        id: chatId,
        username: msg.from?.username,
        firstName: msg.from?.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        lastName: msg.from?.last_name,
        categories: ['tech', 'business'],
        notifications: true,
        lastActive: new Date()
      };
      
      this.users.set(chatId, user);
      
      const welcomeMessage = `
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ NewsBot!

–ü—Ä–∏–≤–µ—Ç, ${user.firstName}! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π.

üîπ /news - –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
üîπ /categories - —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
üîπ /settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
üîπ /stats - —Ç–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
üîπ /help - –ø–æ–º–æ—â—å

–î–∞–≤–∞–π –Ω–∞—Å—Ç—Ä–æ–∏–º —Ç–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è! üëá
      `;
      
      const options = {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏', callback_data: 'get_news' }],
            [{ text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', callback_data: 'setup_categories' }],
            [{ text: 'üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'show_stats' }]
          ]
        }
      };
      
      this.bot.sendMessage(chatId, welcomeMessage, options);
    });

    // –ö–æ–º–∞–Ω–¥–∞ /news
    this.bot.onText(/\/news/, (msg) => {
      this.sendNews(msg.chat.id);
    });

    // –ö–æ–º–∞–Ω–¥–∞ /categories
    this.bot.onText(/\/categories/, (msg) => {
      this.showCategories(msg.chat.id);
    });

    // –ö–æ–º–∞–Ω–¥–∞ /settings
    this.bot.onText(/\/settings/, (msg) => {
      this.showSettings(msg.chat.id);
    });

    // –ö–æ–º–∞–Ω–¥–∞ /stats
    this.bot.onText(/\/stats/, (msg) => {
      this.showStats(msg.chat.id);
    });

    // –ö–æ–º–∞–Ω–¥–∞ /help
    this.bot.onText(/\/help/, (msg) => {
      const helpMessage = `
üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

üîπ /start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
üîπ /news - –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
üîπ /categories - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
üîπ /settings - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
üîπ /stats - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
üîπ /help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üí° –¢–∞–∫–∂–µ —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º!
      `;
      
      this.bot.sendMessage(msg.chat.id, helpMessage);
    });
  }

  private setupCallbacks() {
    this.bot.on('callback_query', (query) => {
      const chatId = query.message?.chat.id;
      const data = query.data;
      
      if (!chatId) return;
      
      // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ callback
      this.bot.answerCallbackQuery(query.id);
      
      switch (data) {
        case 'get_news':
          this.sendNews(chatId);
          break;
        case 'setup_categories':
          this.showCategories(chatId);
          break;
        case 'show_stats':
          this.showStats(chatId);
          break;
        case 'toggle_notifications':
          this.toggleNotifications(chatId);
          break;
        default:
          if (data?.startsWith('category_')) {
            this.toggleCategory(chatId, data.replace('category_', ''));
          } else if (data?.startsWith('news_')) {
            this.showNewsDetails(chatId, data.replace('news_', ''));
          }
          break;
      }
    });
  }

  private sendNews(chatId: number) {
    const user = this.users.get(chatId);
    if (!user) {
      this.bot.sendMessage(chatId, '–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start');
      return;
    }

    const filteredNews = this.sampleNews.filter(news => 
      user.categories.includes(news.category)
    );

    if (filteredNews.length === 0) {
      this.bot.sendMessage(chatId, '–ù–æ–≤–æ—Å—Ç–µ–π –ø–æ –≤–∞—à–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –ø–æ–∫–∞ –Ω–µ—Ç. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ /categories');
      return;
    }

    this.bot.sendMessage(chatId, 'üì∞ *–°–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –≤–∞—Å:*', { parse_mode: 'Markdown' });

    filteredNews.forEach((news, index) => {
      const category = this.newsCategories.find(c => c.id === news.category);
      const message = `
${news.emoji} *${news.title}*

${news.description}

üìÖ ${news.publishedAt.toLocaleString('ru-RU')}
üè∑Ô∏è ${category?.name || news.category}
      `;

      const options = {
        parse_mode: 'Markdown' as const,
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üìñ –ü–æ–¥—Ä–æ–±–Ω–µ–µ', callback_data: `news_${news.id}` }],
            [{ text: 'üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è', switch_inline_query: news.title }]
          ]
        }
      };

      setTimeout(() => {
        this.bot.sendMessage(chatId, message, options);
      }, index * 500);
    });
  }

  private showCategories(chatId: number) {
    const user = this.users.get(chatId);
    if (!user) return;

    const message = 'üè∑Ô∏è *–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:*\n\n‚úÖ - –ø–æ–¥–ø–∏—Å–∞–Ω\n‚ùå - –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω';
    
    const keyboard = this.newsCategories.map(category => [{
      text: `${user.categories.includes(category.id) ? '‚úÖ' : '‚ùå'} ${category.emoji} ${category.name}`,
      callback_data: `category_${category.id}`
    }]);

    const options = {
      parse_mode: 'Markdown' as const,
      reply_markup: {
        inline_keyboard: keyboard
      }
    };

    this.bot.sendMessage(chatId, message, options);
  }

  private toggleCategory(chatId: number, categoryId: string) {
    const user = this.users.get(chatId);
    if (!user) return;

    const category = this.newsCategories.find(c => c.id === categoryId);
    if (!category) return;

    if (user.categories.includes(categoryId)) {
      user.categories = user.categories.filter(c => c !== categoryId);
      this.bot.sendMessage(chatId, `‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${category.name}"`);
    } else {
      user.categories.push(categoryId);
      this.bot.sendMessage(chatId, `‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é "${category.name}"`);
    }

    this.users.set(chatId, user);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    setTimeout(() => this.showCategories(chatId), 1000);
  }

  private showSettings(chatId: number) {
    const user = this.users.get(chatId);
    if (!user) return;

    const message = `
‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*

–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${user.notifications ? 'üîî –í–∫–ª—é—á–µ–Ω—ã' : 'üîï –í—ã–∫–ª—é—á–µ–Ω—ã'}

–£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–µ–º, –∫–∞–∫ –∏ –∫–æ–≥–¥–∞ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ—Å—Ç—è—Ö.
    `;

    const options = {
      parse_mode: 'Markdown' as const,
      reply_markup: {
        inline_keyboard: [
          [{
            text: user.notifications ? 'üîï –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' : 'üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
            callback_data: 'toggle_notifications'
          }],
          [{ text: 'üè∑Ô∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', callback_data: 'setup_categories' }],
          [{ text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'show_stats' }]
        ]
      }
    };

    this.bot.sendMessage(chatId, message, options);
  }

  private toggleNotifications(chatId: number) {
    const user = this.users.get(chatId);
    if (!user) return;

    user.notifications = !user.notifications;
    this.users.set(chatId, user);

    const status = user.notifications ? 'üîî –≤–∫–ª—é—á–µ–Ω—ã' : 'üîï –≤—ã–∫–ª—é—á–µ–Ω—ã';
    this.bot.sendMessage(chatId, `–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${status}`);
    
    setTimeout(() => this.showSettings(chatId), 1000);
  }

  private showStats(chatId: number) {
    const user = this.users.get(chatId);
    if (!user) return;

    const daysSinceRegistration = Math.floor(
      (new Date().getTime() - user.lastActive.getTime()) / (1000 * 60 * 60 * 24)
    );

    const message = `
üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*

üë§ –ò–º—è: ${user.firstName}
üìÖ –ê–∫—Ç–∏–≤–µ–Ω: ${daysSinceRegistration === 0 ? '—Å–µ–≥–æ–¥–Ω—è' : `${daysSinceRegistration} –¥–Ω. –Ω–∞–∑–∞–¥`}
üè∑Ô∏è –ü–æ–¥–ø–∏—Å–æ–∫: ${user.categories.length}
üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${user.notifications ? '–≤–∫–ª—é—á–µ–Ω—ã' : '–≤—ã–∫–ª—é—á–µ–Ω—ã'}

üì∞ –î–æ—Å—Ç—É–ø–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π: ${this.sampleNews.filter(n => user.categories.includes(n.category)).length}
    `;

    this.bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
  }

  private showNewsDetails(chatId: number, newsId: string) {
    const news = this.sampleNews.find(n => n.id === newsId);
    if (!news) return;

    const category = this.newsCategories.find(c => c.id === news.category);
    const message = `
üì∞ *–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –Ω–æ–≤–æ—Å—Ç–∏*

${news.emoji} *${news.title}*

${news.description}

üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${category?.name || news.category}
üìÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: ${news.publishedAt.toLocaleString('ru-RU')}

${news.url ? `üîó –ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é: ${news.url}` : ''}
    `;

    this.bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
  public broadcastNews(news: NewsItem) {
    this.users.forEach((user, chatId) => {
      if (user.notifications && user.categories.includes(news.category)) {
        const category = this.newsCategories.find(c => c.id === news.category);
        const message = `
üîî *–ù–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å!*

${news.emoji} *${news.title}*

${news.description}

üè∑Ô∏è ${category?.name || news.category}
        `;

        this.bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
      }
    });
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞
  public getBotStats() {
    return {
      totalUsers: this.users.size,
      activeUsers: Array.from(this.users.values()).filter(u => u.notifications).length,
      totalNews: this.sampleNews.length,
      categories: this.newsCategories.length
    };
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
export { NewsBot, type User, type NewsItem };

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –∑–∞–ø—É—Å–∫–∞)
/*
const BOT_TOKEN = 'YOUR_BOT_TOKEN_HERE';
const newsBot = new NewsBot(BOT_TOKEN);

console.log('ü§ñ NewsBot –∑–∞–ø—É—â–µ–Ω!');

// –ü—Ä–∏–º–µ—Ä —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
setTimeout(() => {
  const testNews: NewsItem = {
    id: '999',
    title: '–¢–µ—Å—Ç–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å',
    description: '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏',
    category: 'tech',
    publishedAt: new Date(),
    emoji: 'üß™'
  };
  
  newsBot.broadcastNews(testNews);
}, 10000);
*/